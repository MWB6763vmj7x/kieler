/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2012 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.core.kgraph.text.krendering.KRendering with de.cau.cs.kieler.core.kgraph.text.klayoutdata.KLayoutData

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/KRendering"

KRenderingLibrary returns KRenderingLibrary:
    {KRenderingLibrary}
    'RenderingLibrary'
    '{'
        (renderings+=KRendering ( ","? renderings+=KRendering)*)?
    '}';

KRendering returns KRendering:
    KEllipse | KRectangle | KRoundedRectangle | KPolyline_Impl | KPolygon | KImage | KArc | KRenderingRef | KChildArea | KText | KCustomRendering | KSpline | KRoundedBendsPolyline;

KPlacementData returns KPlacementData:
    KDecoratorPlacementData | KGridPlacementData | KAreaPlacementData | KPointPlacementData;

KStyle returns KStyle:
    KLineWidth | KForeground | KBackground | KVisibility | KLineStyle | KLineCap | KRotation | KShadow | KFontBold | KFontItalic | KFontName | KFontSize | KVerticalAlignment | KHorizontalAlignment | KStyleRef;

KPlacement returns KPlacement:
    KGridPlacement;

KXPosition returns KXPosition:
    KLeftPosition | KRightPosition;

KYPosition returns KYPosition:
    KTopPosition | KBottomPosition;

KRenderingRef returns KRenderingRef:
    {KRenderingRef}
    'RenderingRef' rendering=[KRendering|EString]
    ('{'
        ('styles' ':'?  styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
    '}')?;
    
KEllipse returns KEllipse:
    {KEllipse}
    'Ellipse'
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KRectangle returns KRectangle:
    {KRectangle}
    'Rectangle'
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KRoundedRectangle returns KRoundedRectangle:
    {KRoundedRectangle}
    'RoundedRectangle' cornerWidth=EFloat ','? cornerHeight=EFloat
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KPolyline_Impl returns KPolyline:
    {KPolyline}
    'Polyline'
    ('{'
        ('points' ':'? points+=KPosition ( ","? points+=KPosition)*)? 
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KRoundedBendsPolyline returns KRoundedBendsPolyline:
    {KRoundedBendsPolyline}
    'RoundedBendsPolyline' bendRadius=EFloat
    ('{'
        ('points' ':'? points+=KPosition ( ","? points+=KPosition)*)? 
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KPolygon returns KPolygon:
    {KPolygon}
    'Polygon'
    ('{'
        ('points' ':'? points+=KPosition ( ","? points+=KPosition)*)? 
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KImage returns KImage:
    {KImage}
    'Image' ((bundleName=EString) | '-') imagePath=EString
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KArc returns KArc:
    {KArc}
    'Arc' startAngle=EFloat ','? arcAngle=EFloat
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KChildArea returns KChildArea:
    {KChildArea}
    'ChildArea'
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
    '}')?;

KText returns KText:
    {KText}
    'Text' (text=EString)?
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        // allow mapProperties in order to specify size for size estimation tests
        // (I don't trust in the different SWT implementations to
        // provide the same size of a text on different platforms)
        ('mapProperties' ':'? persistentEntries+=PersistentEntry ( ","? persistentEntries+=PersistentEntry)*)?
    '}')?;

KCustomRendering returns KCustomRendering:
    {KCustomRendering}
    'CustomRendering'
    ('{'
        'className' className=EString
        'bundleName' bundleName=EString
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KSpline returns KSpline:
    {KSpline}
    'Spline'
    ('{'
        ('styles' ':'? styles+=KStyle ( ","? styles+=KStyle)*)?
        ('placementData' ':'? placementData=KPlacementData)?
        ('childPlacement' ':'? childPlacement=KPlacement)?
        ('children' ':'? children+=KRendering ( ","? children+=KRendering)*)?
    '}')?;

KDecoratorPlacementData returns KDecoratorPlacementData:
    'DecoratorPlacementData'
    '{'
        (rotateWithLine?='rotateWithLine')?
        'absolute' absolute=EFloat
        ('relative' relative=EFloat)?
        ('xOffset' xOffset=EFloat)?
        ('yOffset' yOffset=EFloat)?
        ('width' width=EFloat)?
        ('height' height=EFloat)?
    '}';

KGridPlacementData returns KGridPlacementData:
    {KGridPlacementData}
    'GridPlacementData'
    '{'
        ('minCellWidth' minCellWidth=EFloat)?
        ('minCellHeight' minCellHeight=EFloat)?
        ('maxCellWidth' maxCellWidth=EFloat)?
        ('maxCellHeight' maxCellHeight=EFloat)?
        ('topLeft' topLeft=KPosition)?
        ('bottomRight' bottomRight=KPosition)?
     '}';

KAreaPlacementData returns KAreaPlacementData:
    'AreaPlacementData'
    '{'
        'topLeft' topLeft=KPosition ","?
        'bottomRight' bottomRight=KPosition
    '}';
KPointPlacementData returns KPointPlacementData:
    'PointPlacementData'
    '{'
        'referencePoint' referencePoint=KPosition
        ('verticalAlignment' verticalAlignment=VerticalAlignment)?
        ('horizontalAlignment' horizontalAlignment=HorizontalAlignment)?
        ('horizontalMargin' horizontalMargin=EFloat)?
        ('verticalMargin' verticalMargin=EFloat)?
        ('minWidth' minWidth=EFloat)?
        ('minHeight' minHeight=EFloat)?
    '}';

KPosition returns KPosition:
    x=KXPosition '/' y=KYPosition;

KLeftPosition returns KLeftPosition:
    {KLeftPosition}
    'left' absolute=EFloat relative=EFloat;

KRightPosition returns KRightPosition:
    {KRightPosition}
    'right' absolute=EFloat relative=EFloat;

KTopPosition returns KTopPosition:
    {KTopPosition}
    'top' absolute=EFloat relative=EFloat;

KBottomPosition returns KBottomPosition:
    {KBottomPosition}
    'bottom' absolute=EFloat relative=EFloat;

KColor returns KColor:
    {KColor}
    red=EInt  green=EInt blue=EInt;
    
KBackground returns KBackground:
    {KBackground}
    'background'
    '{'
        ('color' color=KColor)?
        ('targetColor' targetColor=KColor)?
        ('alpha' alpha=EInt)?
        ('targetAlpha' targetAlpha=EInt)?
        ('gradientAngle' gradientAngle=EFloat)?
    '}' (propagateToChildren?='!')?;

KForeground returns KForeground:
    {KForeground}
   'foreground'
    '{'
        ('color' color=KColor)?
        ('targetColor' targetColor=KColor)?
        ('alpha' alpha=EInt)?
        ('targetAlpha' targetAlpha=EInt)?
        ('gradientAngle' gradientAngle=EFloat)?
    '}' (propagateToChildren?='!')?;
    
KVisibility returns KInvisibility:
    {KInvisibility}
    invisible?='invisible'
    ('modifier' '=' modifierId=EString)?;
    
    
KLineWidth returns KLineWidth:
    'lineWidth' lineWidth=EFloat (propagateToChildren?='!')? 
    ('modifier' '=' modifierId=EString)?;

KLineStyle returns KLineStyle:
    {KLineStyle}
    'lineStyle' lineStyle=LineStyle propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;

KLineCap returns KLineCap:
     {KLineCap}
     'lineCap' lineCap=LineCap  propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KRotation returns KRotation:
    {KRotation}
    'rotation' rotation=EFloat propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KShadow returns KShadow:
    {KShadow}
    'shadow' color=KColor propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KFontBold returns KFontBold:
    {KFontBold}
    bold?='bold' propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KFontItalic returns KFontItalic:
    {KFontItalic}
    italic?='italic' propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KFontName returns KFontName:
    'font' name=EString propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;

KFontSize returns KFontSize:
    'fontSize' size=EInt propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;

KVerticalAlignment returns KVerticalAlignment:
    {KVerticalAlignment}
    'verticalAlignment' verticalAlignment=VerticalAlignment propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;
    
KHorizontalAlignment returns KHorizontalAlignment:
    {KHorizontalAlignment}
    'horizontalAlignment' horizontalAlignment=HorizontalAlignment propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;

KStyleRef returns KStyleRef:
    {KStyleRef}
    'styleRef' styleHolder=[KStyleHolder|EString] propagateToChildren?='!'?
    ('modifier' '=' modifierId=EString)?;

KGridPlacement returns KGridPlacement:
    {KGridPlacement}
    'gridPlacement' numColumns=EInt
    ('{'
        'topLeft' topLeft=KPosition ","?
        'bottomRight' bottomRight=KPosition
    '}')?
    ;
    

enum LineStyle returns LineStyle:
    SOLID = 'SOLID' | DASH = 'DASH' | DOT = 'DOT' | DASHDOT = 'DASHDOT' | DASHDOTDOT = 'DASHDOTDOT';

enum LineCap returns LineCap:
    CAP_FLAT = 'CAP_FLAT' | CAP_ROUND = 'CAP_ROUND' | CAP_SQUARE = 'CAP_SQUARE';

enum VerticalAlignment returns VerticalAlignment:
    TOP = 'TOP' | CENTER = 'CENTER' | BOTTOM = 'BOTTOM';

enum HorizontalAlignment returns HorizontalAlignment:
    LEFT = 'LEFT' | CENTER = 'CENTER' | RIGHT = 'RIGHT';

EFloat returns ecore::EFloat:
    '-'? INT ('.' INT (('E'|'e') '-'? INT)?)?;

EBoolean returns ecore::EBoolean:
    'true' | 'false';

EInt returns ecore::EInt:
    '-'? INT;
