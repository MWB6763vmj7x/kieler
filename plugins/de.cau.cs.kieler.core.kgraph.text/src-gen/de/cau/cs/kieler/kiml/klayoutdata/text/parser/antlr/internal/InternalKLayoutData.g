/*
* generated by Xtext
*/
grammar InternalKLayoutData;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.kiml.klayoutdata.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.kiml.klayoutdata.text.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.kiml.klayoutdata.text.services.KLayoutDataGrammarAccess;

}

@parser::members {

 	private KLayoutDataGrammarAccess grammarAccess;
 	
    public InternalKLayoutDataParser(TokenStream input, KLayoutDataGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "KShapeLayout";	
   	}
   	
   	@Override
   	protected KLayoutDataGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKShapeLayout
entryRuleKShapeLayout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKShapeLayoutRule()); }
	 iv_ruleKShapeLayout=ruleKShapeLayout 
	 { $current=$iv_ruleKShapeLayout.current; } 
	 EOF 
;

// Rule KShapeLayout
ruleKShapeLayout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKShapeLayoutAccess().getKShapeLayoutAction_0(),
            $current);
    }
)	otherlv_1='KShapeLayout' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKShapeLayoutAccess().getKShapeLayoutKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKShapeLayoutAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='xpos' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKShapeLayoutAccess().getXposKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getXposEFloatParserRuleCall_3_1_0()); 
	    }
		lv_xpos_4_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		set(
       			$current, 
       			"xpos",
        		lv_xpos_4_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='ypos' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKShapeLayoutAccess().getYposKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getYposEFloatParserRuleCall_4_1_0()); 
	    }
		lv_ypos_6_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		set(
       			$current, 
       			"ypos",
        		lv_ypos_6_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='width' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getKShapeLayoutAccess().getWidthKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getWidthEFloatParserRuleCall_5_1_0()); 
	    }
		lv_width_8_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		set(
       			$current, 
       			"width",
        		lv_width_8_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='height' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getKShapeLayoutAccess().getHeightKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getHeightEFloatParserRuleCall_6_1_0()); 
	    }
		lv_height_10_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		set(
       			$current, 
       			"height",
        		lv_height_10_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='insets' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getKShapeLayoutAccess().getInsetsKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getInsetsKInsetsParserRuleCall_7_1_0()); 
	    }
		lv_insets_12_0=ruleKInsets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		set(
       			$current, 
       			"insets",
        		lv_insets_12_0, 
        		"KInsets");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_13='mapProperties' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getKShapeLayoutAccess().getMapPropertiesKeyword_8_0());
    }
	otherlv_14=':' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getKShapeLayoutAccess().getColonKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getPersistentEntriesPersistentEntryParserRuleCall_8_2_0()); 
	    }
		lv_persistentEntries_15_0=rulePersistentEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		add(
       			$current, 
       			"persistentEntries",
        		lv_persistentEntries_15_0, 
        		"PersistentEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getKShapeLayoutAccess().getCommaKeyword_8_3_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getKShapeLayoutAccess().getPersistentEntriesPersistentEntryParserRuleCall_8_3_1_0()); 
	    }
		lv_persistentEntries_17_0=rulePersistentEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKShapeLayoutRule());
	        }
       		add(
       			$current, 
       			"persistentEntries",
        		lv_persistentEntries_17_0, 
        		"PersistentEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getKShapeLayoutAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleKInsets
entryRuleKInsets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKInsetsRule()); }
	 iv_ruleKInsets=ruleKInsets 
	 { $current=$iv_ruleKInsets.current; } 
	 EOF 
;

// Rule KInsets
ruleKInsets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKInsetsAccess().getKInsetsAction_0(),
            $current);
    }
)	otherlv_1='KInsets' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKInsetsAccess().getKInsetsKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKInsetsAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='top' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKInsetsAccess().getTopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKInsetsAccess().getTopEFloatParserRuleCall_3_1_0()); 
	    }
		lv_top_4_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKInsetsRule());
	        }
       		set(
       			$current, 
       			"top",
        		lv_top_4_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='bottom' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKInsetsAccess().getBottomKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKInsetsAccess().getBottomEFloatParserRuleCall_4_1_0()); 
	    }
		lv_bottom_6_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKInsetsRule());
	        }
       		set(
       			$current, 
       			"bottom",
        		lv_bottom_6_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='left' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getKInsetsAccess().getLeftKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKInsetsAccess().getLeftEFloatParserRuleCall_5_1_0()); 
	    }
		lv_left_8_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKInsetsRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_8_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='right' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getKInsetsAccess().getRightKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKInsetsAccess().getRightEFloatParserRuleCall_6_1_0()); 
	    }
		lv_right_10_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKInsetsRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_10_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getKInsetsAccess().getRightCurlyBracketKeyword_7());
    }
)
;







// Entry rule entryRuleKPoint
entryRuleKPoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKPointRule()); }
	 iv_ruleKPoint=ruleKPoint 
	 { $current=$iv_ruleKPoint.current; } 
	 EOF 
;

// Rule KPoint
ruleKPoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKPointAccess().getKPointAction_0(),
            $current);
    }
)	otherlv_1='KPoint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKPointAccess().getKPointKeyword_1());
    }
(	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKPointAccess().getXKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKPointAccess().getXEFloatParserRuleCall_2_1_0()); 
	    }
		lv_x_3_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKPointRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_3_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='y' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKPointAccess().getYKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKPointAccess().getYEFloatParserRuleCall_3_1_0()); 
	    }
		lv_y_5_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKPointRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_5_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePersistentEntry
entryRulePersistentEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersistentEntryRule()); }
	 iv_rulePersistentEntry=rulePersistentEntry 
	 { $current=$iv_rulePersistentEntry.current; } 
	 EOF 
;

// Rule PersistentEntry
rulePersistentEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPersistentEntryAccess().getKeyEStringParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersistentEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPersistentEntryAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersistentEntryAccess().getValueEStringParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersistentEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFloatRule()); } 
	 iv_ruleEFloat=ruleEFloat 
	 { $current=$iv_ruleEFloat.current.getText(); }  
	 EOF 
;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3()); 
    }
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


