<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.cau.cs.kieler.klighd" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="de.cau.cs.kieler.klighd" id="modelTransformations" name="ModelTransformations"/>
      </appinfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="transformation"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="transformation">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The implementation of the transformation. In case the transformation maintains a local memory or uses dependency injection by means of Google Guice the class is suggested to be prefixed with the string &quot;de.cau.cs.kieler.klighd/de.cau.cs.kieler.klighd.transformations.GuiceBasedTransformationFactory:&quot;. This causes the creation of a transformation proxy instance taking care about (re-)initializing the actual transformation properly.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="de.cau.cs.kieler.klighd.transformations.AbstractTransformation:de.cau.cs.kieler.klighd.IModelTransformation"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="EPackage">
      <annotation>
         <documentation>
            A collection of EPackages to be registered at the runtime (XtendFacade).&lt;br&gt;
KLighD tries to infer them by means of the imports of the given Xtend file.
However, in case those EPackage are not resolved in the EMF package registry yet,
this will not suffice. Consequently all EPackage involved in the transformation except the
EPackage of the input models (this one will be available if the model has been loaded properly)
should be registered.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="EPackageClass" type="string" use="required">
            <annotation>
               <documentation>
                  An EPackage class generated by EMF needed by the transformation.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.ecore.EPackage:"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
